<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Impossible Tic-Tac-Toe</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }
        .game-container {
            background-color: #ffffff;
            border-radius: 1.5rem; /* More rounded corners */
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            padding: 2.5rem;
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 0.75rem; /* Gap between cells */
            width: 100%;
            max-width: 300px; /* Fixed width for the board */
            margin: 1.5rem auto;
        }
        .cell {
            width: 100px; /* Fixed size for cells */
            height: 100px;
            background-color: #e2e8f0; /* Lighter gray for cells */
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3.5rem; /* Larger font for X/O */
            font-weight: 700;
            cursor: pointer;
            border-radius: 0.75rem; /* Rounded corners for cells */
            transition: background-color 0.2s ease, transform 0.1s ease;
            color: #2d3748; /* Dark text color */
        }
        .cell:not(.filled):hover {
            background-color: #cbd5e0; /* Slightly darker on hover */
            transform: scale(1.02);
        }
        .cell.filled {
            cursor: not-allowed;
        }
        .cell.X {
            color: #ef4444; /* Red for X */
        }
        .cell.O {
            color: #3b82f6; /* Blue for O */
        }
        #status {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: #1a202c; /* Dark text */
        }
        .button {
            background-color: #4f46e5; /* Indigo */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease;
            border: none;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        .button:hover {
            background-color: #4338ca; /* Darker indigo */
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .button:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.06);
        }

        /* Modal styling */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal.show {
            opacity: 1;
            visibility: visible;
        }
        .modal-content {
            background-color: #ffffff;
            padding: 2.5rem;
            border-radius: 1.5rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            text-align: center;
            max-width: 400px;
            width: 90%;
            transform: translateY(-20px);
            transition: transform 0.3s ease;
        }
        .modal.show .modal-content {
            transform: translateY(0);
        }
        .modal-message {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            color: #1a202c;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="text-3xl font-bold text-gray-800 mb-4">Impossible Tic-Tac-Toe</h1>
        <div id="status" class="text-xl"></div>
        <div class="board" id="gameBoard">
            <!-- Cells will be generated by JavaScript -->
        </div>
        <button id="resetButton" class="button">Reset Game</button>
    </div>

    <!-- Modal for game messages -->
    <div id="gameModal" class="modal">
        <div class="modal-content">
            <p id="modalMessage" class="modal-message"></p>
            <button id="closeModalButton" class="button">Play Again</button>
        </div>
    </div>

    <script>
        // Game state variables
        let board = ['', '', '', '', '', '', '', '', '']; // Represents the 3x3 board
        let currentPlayer = 'X'; // Human player is 'X', AI is 'O'
        let gameActive = true; // True while the game is ongoing

        // DOM elements
        const gameBoard = document.getElementById('gameBoard');
        const statusDisplay = document.getElementById('status');
        const resetButton = document.getElementById('resetButton');
        const gameModal = document.getElementById('gameModal');
        const modalMessage = document.getElementById('modalMessage');
        const closeModalButton = document.getElementById('closeModalButton');

        // Winning combinations (indices of cells that form a win)
        const winningConditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
            [0, 4, 8], [2, 4, 6]             // Diagonals
        ];

        /**
         * Initializes the game board and sets up event listeners.
         */
        function initializeGame() {
            // Clear previous board and create new cells
            gameBoard.innerHTML = '';
            board.forEach((cell, index) => {
                const cellElement = document.createElement('div');
                cellElement.classList.add('cell', 'rounded-xl'); // Added rounded-xl for consistency
                cellElement.dataset.cellIndex = index;
                cellElement.addEventListener('click', handleCellClick);
                gameBoard.appendChild(cellElement);
            });

            // Reset game state
            board = ['', '', '', '', '', '', '', '', ''];
            currentPlayer = 'X';
            gameActive = true;
            statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
            hideModal();
        }

        /**
         * Handles a click on a game board cell.
         * @param {Event} clickedCellEvent - The click event object.
         */
        function handleCellClick(clickedCellEvent) {
            const clickedCell = clickedCellEvent.target;
            const clickedCellIndex = parseInt(clickedCell.dataset.cellIndex);

            // If the cell is already filled or the game is not active, do nothing
            if (board[clickedCellIndex] !== '' || !gameActive) {
                return;
            }

            // Process the human player's move
            handlePlayerMove(clickedCell, clickedCellIndex);
        }

        /**
         * Updates the game board and checks game status after a player's move.
         * @param {HTMLElement} cellElement - The DOM element of the clicked cell.
         * @param {number} index - The index of the cell.
         */
        function handlePlayerMove(cellElement, index) {
            board[index] = currentPlayer;
            cellElement.textContent = currentPlayer;
            cellElement.classList.add(currentPlayer, 'filled'); // Add class for styling and prevent further clicks

            const gameResult = checkGameResult();
            if (gameResult) {
                // Game over (win or draw)
                endGame(gameResult);
            } else {
                // Switch to AI's turn
                currentPlayer = 'O';
                statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
                // Delay AI move slightly for better user experience
                setTimeout(makeAIMove, 700);
            }
        }

        /**
         * Checks the current state of the game (win or draw).
         * @returns {string|null} - 'win', 'draw', or null if game is still active.
         */
        function checkGameResult() {
            let roundWon = false;
            for (let i = 0; i < winningConditions.length; i++) {
                const winCondition = winningConditions[i];
                let a = board[winCondition[0]];
                let b = board[winCondition[1]];
                let c = board[winCondition[2]];

                if (a === '' || b === '' || c === '') {
                    continue; // Skip if any cell in the condition is empty
                }
                if (a === b && b === c) {
                    roundWon = true;
                    break; // Found a winner
                }
            }

            if (roundWon) {
                return 'win';
            }

            // Check for draw (all cells filled and no winner)
            if (!board.includes('')) {
                return 'draw';
            }

            return null; // Game still active
        }

        /**
         * Ends the game and displays the result in a modal.
         * @param {string} result - 'win' or 'draw'.
         */
        function endGame(result) {
            gameActive = false;
            let message = '';
            if (result === 'win') {
                message = `Player ${currentPlayer} Wins!`;
            } else {
                message = `It's a Draw!`;
            }
            statusDisplay.textContent = message;
            showModal(message);
        }

        /**
         * Displays the game over modal with a message.
         * @param {string} message - The message to display.
         */
        function showModal(message) {
            modalMessage.textContent = message;
            gameModal.classList.add('show');
        }

        /**
         * Hides the game over modal.
         */
        function hideModal() {
            gameModal.classList.remove('show');
        }

        /**
         * Resets the game to its initial state.
         */
        function resetGame() {
            initializeGame();
        }

        // Event listeners for buttons
        resetButton.addEventListener('click', resetGame);
        closeModalButton.addEventListener('click', resetGame);

        // --- AI Logic (The "Impossible" Part) ---

        /**
         * Makes the AI's move based on a strategic hierarchy.
         */
        function makeAIMove() {
            if (!gameActive) return;

            let bestMove = -1;

            // 1. Check for immediate win for AI ('O')
            bestMove = findWinningMove(board, 'O');
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }

            // 2. Check for immediate win for Human ('X') and block it
            bestMove = findWinningMove(board, 'X');
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }

            // 3. Check for AI fork opportunity
            bestMove = findFork(board, 'O');
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }

            // 4. Check for Human fork opportunity and block it
            bestMove = blockOpponentFork(board, 'X', 'O');
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }

            // 5. Take the center if available
            if (board[4] === '') {
                applyAIMove(4);
                return;
            }

            // 6. Take opposite corner if human has a corner
            bestMove = findOppositeCorner(board, 'X');
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }

            // 7. Take any empty corner
            bestMove = findEmptyCorner(board);
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }

            // 8. Take any empty side
            bestMove = findEmptySide(board);
            if (bestMove !== -1) {
                applyAIMove(bestMove);
                return;
            }
        }

        /**
         * Applies the AI's chosen move to the board and updates the UI.
         * @param {number} index - The index of the cell to play.
         */
        function applyAIMove(index) {
            const cellElement = gameBoard.children[index];
            board[index] = currentPlayer;
            cellElement.textContent = currentPlayer;
            cellElement.classList.add(currentPlayer, 'filled');

            const gameResult = checkGameResult();
            if (gameResult) {
                endGame(gameResult);
            } else {
                currentPlayer = 'X'; // Switch back to human player
                statusDisplay.textContent = `Player ${currentPlayer}'s Turn`;
            }
        }

        /**
         * Finds a winning move for a given player on a given board.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @param {string} player - The player to check for ('X' or 'O').
         * @returns {number} - The index of the winning move, or -1 if none.
         */
        function findWinningMove(currentBoard, player) {
            const emptyCells = getEmptyCells(currentBoard);
            for (let i = 0; i < emptyCells.length; i++) {
                const move = emptyCells[i];
                const tempBoard = [...currentBoard];
                tempBoard[move] = player;
                if (checkWinForPlayer(tempBoard, player)) {
                    return move;
                }
            }
            return -1;
        }

        /**
         * Checks if a given player has won on a given board.
         * @param {Array<string>} currentBoard - The board state to check.
         * @param {string} player - The player to check for.
         * @returns {boolean} - True if the player has won, false otherwise.
         */
        function checkWinForPlayer(currentBoard, player) {
            for (let i = 0; i < winningConditions.length; i++) {
                const [a, b, c] = winningConditions[i];
                if (currentBoard[a] === player && currentBoard[b] === player && currentBoard[c] === player) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Gets all empty cells on the board.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @returns {Array<number>} - An array of indices of empty cells.
         */
        function getEmptyCells(currentBoard) {
            return currentBoard.map((cell, index) => cell === '' ? index : null).filter(index => index !== null);
        }

        /**
         * Finds a fork opportunity for a given player.
         * A fork is a move that creates two simultaneous winning threats.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @param {string} player - The player to check for a fork.
         * @returns {number} - The index of the fork move, or -1 if none.
         */
        function findFork(currentBoard, player) {
            const emptyCells = getEmptyCells(currentBoard);
            for (let i = 0; i < emptyCells.length; i++) {
                const move = emptyCells[i];
                const tempBoard = [...currentBoard];
                tempBoard[move] = player;

                let winningLinesCount = 0;
                for (let j = 0; j < winningConditions.length; j++) {
                    const [a, b, c] = winningConditions[j];
                    const line = [tempBoard[a], tempBoard[b], tempBoard[c]];

                    // Check if the line has two of the player's symbols and one empty spot
                    if (line.filter(cell => cell === player).length === 2 && line.includes('')) {
                        winningLinesCount++;
                    }
                }

                if (winningLinesCount >= 2) {
                    return move; // Found a fork
                }
            }
            return -1;
        }

        /**
         * Blocks an opponent's fork. This is the most complex part of the AI.
         * If the opponent has multiple fork opportunities, the AI must create a threat
         * that forces the opponent to block, thus preventing their fork.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @param {string} opponentPlayer - The opponent's symbol ('X').
         * @param {string} aiPlayer - The AI's symbol ('O').
         * @returns {number} - The index of the blocking move, or -1 if no good block.
         */
        function blockOpponentFork(currentBoard, opponentPlayer, aiPlayer) {
            const emptyCells = getEmptyCells(currentBoard);
            const opponentForks = [];

            // Find all potential fork moves for the opponent
            for (let i = 0; i < emptyCells.length; i++) {
                const move = emptyCells[i];
                const tempBoard = [...currentBoard];
                tempBoard[move] = opponentPlayer;
                if (findFork(tempBoard, opponentPlayer) !== -1) {
                    opponentForks.push(move);
                }
            }

            if (opponentForks.length === 1) {
                // If only one fork, simply block it
                return opponentForks[0];
            } else if (opponentForks.length > 1) {
                // If multiple forks, try to create a counter-threat that forces opponent to block
                for (let i = 0; i < emptyCells.length; i++) {
                    const move = emptyCells[i];
                    const tempBoard = [...currentBoard];
                    tempBoard[move] = aiPlayer;

                    // If this move creates a win for AI, it forces opponent to block, preventing their fork
                    if (checkWinForPlayer(tempBoard, aiPlayer)) {
                        return move;
                    }

                    // Check if this move creates a single threat for AI, which opponent must block
                    let aiThreats = 0;
                    for (let j = 0; j < winningConditions.length; j++) {
                        const [a, b, c] = winningConditions[j];
                        const line = [tempBoard[a], tempBoard[b], tempBoard[c]];
                        if (line.filter(cell => cell === aiPlayer).length === 2 && line.includes('')) {
                            aiThreats++;
                        }
                    }
                    if (aiThreats === 1) {
                        return move; // This move creates a single threat, forcing opponent to block
                    }
                }
                // If no counter-threat move found, just block one of the opponent's fork cells
                // This might not be perfect for all complex scenarios but covers many cases.
                return opponentForks[0];
            }
            return -1; // No fork to block
        }


        /**
         * Finds an empty opposite corner if the opponent has taken a corner.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @param {string} opponentPlayer - The opponent's symbol ('X').
         * @returns {number} - The index of the opposite corner, or -1 if none.
         */
        function findOppositeCorner(currentBoard, opponentPlayer) {
            const corners = [0, 2, 6, 8];
            for (let i = 0; i < corners.length; i++) {
                const corner = corners[i];
                if (currentBoard[corner] === opponentPlayer) {
                    const oppositeCorner = 8 - corner; // 0->8, 2->6, 6->2, 8->0
                    if (currentBoard[oppositeCorner] === '') {
                        return oppositeCorner;
                    }
                }
            }
            return -1;
        }

        /**
         * Finds any empty corner.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @returns {number} - The index of an empty corner, or -1 if none.
         */
        function findEmptyCorner(currentBoard) {
            const corners = [0, 2, 6, 8];
            for (let i = 0; i < corners.length; i++) {
                const corner = corners[i];
                if (currentBoard[corner] === '') {
                    return corner;
                }
            }
            return -1;
        }

        /**
         * Finds any empty side cell.
         * @param {Array<string>} currentBoard - The current state of the board.
         * @returns {number} - The index of an empty side cell, or -1 if none.
         */
        function findEmptySide(currentBoard) {
            const sides = [1, 3, 5, 7];
            for (let i = 0; i < sides.length; i++) {
                const side = sides[i];
                if (currentBoard[side] === '') {
                    return side;
                }
            }
            return -1;
        }

        // Initialize the game when the window loads
        window.onload = initializeGame;
    </script>
</body>
</html>
